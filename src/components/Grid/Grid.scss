@import "../../styles/variables";
@import '../../styles/mixins';

.page--grid .ui.grid {
  max-width: 720px;
  margin-left: auto;
  margin-right: auto;
  
  .column > * {
    padding: 16px;
    border-radius: 4px;
    background-color: $primary-color;
    color: #fff;
  }  
}

$gutterWidth: 16px;
$columns: 12;

.ui.grid {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: stretch;
  padding: 0em;
}

.ui.grid>* {
  padding-left: ($gutterWidth / 2);
  padding-right: ($gutterWidth / 2);
  margin: 0;
}

.ui.grid>.row {
  position: relative;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: inherit;
  align-items: stretch;
  width: 100% !important;
  padding: 0rem;
}

.ui.grid>.row>.column,
.ui.grid>.column:not(.row) {
  width: (1/ $columns * 100%);
  vertical-align: top;
  display: inline-block;
  padding-left: ($gutterWidth / 2);
  padding-right: ($gutterWidth / 2);
}

.ui.grid>.row>.column {
  margin-left: auto;
  margin-right: auto;
  box-sizing: border-box;

  // helper classes to remove padding
  &.no-padding {
    padding: 0 !important;
  }

  &.no-padding-left {
    padding-left: 0 !important;
  }

  &.no-padding-right {
    padding-right: 0 !important;
  }
}

// gutter for grid
.ui.grid > .column:not(.row),
.ui.grid > .row > .column {
  position: relative;
  display: inline-block;

  width: (1/$columns * 100%);
  padding-left: ($gutterWidth / 2);
  padding-right: ($gutterWidth / 2);
  vertical-align: top;
}

.ui.grid>.row>[class*="twelve wide mobile"].column,
.ui.grid>.column.row>[class*="twelve wide mobile"].column,
.ui.grid>[class*="twelve wide mobile"].column,
.ui.column.grid>[class*="twelve wide mobile"].column {
  width: (12 / 12 * 100%);
  padding: 0;
}
$column-sizes: (1, one), 
          (2, two), 
          (3, three),
          (4, four),
          (5, five),
          (6, six),
          (7, seven),
          (8, eight),
          (9, nine),
          (10, ten),
          (11, eleven),
          (12, twelve);

@include medium {
  .ui.grid > .row > [class*="wide tablet"].column,
  .ui.grid > .column.row > [class*="wide tablet"].column,
  .ui.grid > [class*="wide tablet"].column,
  .ui.column.grid > [class*="wide tablet"].column {
    padding-left: $gutterWidth/2;
    padding-right: $gutterWidth/2;
  }
  
  @each $number, $name in $column-sizes {
    .ui.grid > .row > [class*="#{$name} wide tablet"].column,
    .ui.grid > .column.row > [class*="#{$name} wide tablet"].column,
    .ui.grid > [class*="#{$name} wide tablet"].column,
    .ui.column.grid > [class*="#{$name} wide tablet"].column {
      width: ($number / $columns * 100%);
    }
  }
}

@include large {
  .ui.grid > .row > [class*="wide computer"].column,
  .ui.grid > .column.row > [class*="wide computer"].column,
  .ui.grid > [class*="wide computer"].column,
  .ui.column.grid > [class*="wide computer"].column {
    padding-left: $gutterWidth/2;
    padding-right: $gutterWidth/2;
  }

  @each $number, $name in $column-sizes {
    .ui.grid > .row > [class*="#{$name} wide computer"].column,
    .ui.grid > .column.row > [class*="#{$name} wide computer"].column,
    .ui.grid > [class*="#{$name} wide computer"].column,
    .ui.column.grid > [class*="#{$name} wide computer"].column {
      width: ( $number / $columns * 100%);
    }
  }
}